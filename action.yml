name: "direnv-nix"
description: "Use a nix based direnv environment"
inputs:
    nix-cache-prefix:
        description: "Prefix for nix store cache key"
        required: false
        default: "nix-store"
    install-nix:
        description: "Include nix installation; disable if you installed it before"
        required: false
        default: "true"
    cache-store:
        description: "Cache nix store"
        required: false
        default: "true"
    export-all-vars:
        description: "Export all ENV vars direnv would touch, not just the PATH"
        required: false
        default: "true"
    # nix-cache-files:
    #     description: "File name patterns (used in find) for files used in the nix derivation"
    #     required: false
    #     default: '["*/*.nix", "*/flake.lock"]'
runs:
    using: "composite"
    steps:
        # cache nix store https://github.com/cachix/install-nix-action/issues/56#issuecomment-1240991760
        - name: "Cache Nix store"
          uses: actions/cache@v3.0.11
          if: ${{ inputs.cache-nix-store == 'true' }}
          id: nix-cache
          with:
              path: /tmp/nixcache
              #   key: ${{ format('{0}-{1}-{2}', runner.os, inputs.nix-cache-prefix, hashFiles(join(fromJson(inputs.nix-cache-glob), ','))) }}
              key: ${{ format('{0}-{1}-{2}', runner.os, inputs.nix-cache-prefix, hashFiles('**/*.nix', '**/flake.lock')) }}
              restore-keys: |
                  ${{ format('{0}-{1}', runner.os, inputs.nix-cache-prefix) }}

        - uses: cachix/install-nix-action@v18
          if: ${{ inputs.install-nix == 'true' }}
          with:
              nix_path: nixpkgs=channel:nixos-unstable # TODO: config option
              # TODO: make this a config option
              extra_nix_config: |
                  sandbox = false

        - name: "Import Nix store cache"
          shell: bash
          if: ${{ inputs.cache-nix-store == 'true' && steps.nix-cache.outputs.cache-hit == 'true' }}
          run: |
              echo "::group::Nix store import"
              nix-store --import < /tmp/nixcache
              echo "::endgroup::"

        - name: "Setup Nix Environment"
          shell: bash
          run: |
              echo "::group::Nix Environment setup"
              nix-env --install --attr direnv nix-direnv -f '<nixpkgs>'
              echo "source $HOME/.nix-profile/share/nix-direnv/direnvrc" >> $HOME/.direnvrc
              direnv allow . 
              direnv exec / direnv export json > /tmp/direnv.out 
              echo "::endgroup::"

        - name: "Export Env vars and Path"
          uses: actions/github-script@v6
          with:
              script: |
                  const fs = require('fs')
                  const direnvExport = JSON.parse(fs.readFileSync('/tmp/direnv.out'))
                  const shouldExportEnvVars = (core.getInput('export-all-vars', { required: false }) ?? 'true') === 'true';
                  core.startGroup('DirEnvOutput')
                  core.info(JSON.stringify(direnvExport))
                  core.info(JSON.stringify(shouldExportEnvVars))
                  core.endGroup()
                  Object.keys(direnvExport).forEach(function (name) {
                    const value = direnvExport[name];
                    if (name === 'PATH') {
                        core.addPath(value);
                    } else if (shouldExportEnvVars) {
                        core.exportVariable(name, value);
                    }
                  });

        - name: "Export Nix store cache"
          shell: bash
          if: ${{ inputs.cache-nix-store == 'true' && steps.nix-cache.outputs.cache-hit != 'true' }}
          run: |
              echo "::group::Nix store export"
              nix-store --export $(find /nix/store -maxdepth 1 -name '*-*') > /tmp/nixcache
              echo "::endgroup::"
